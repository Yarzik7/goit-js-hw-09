{"mappings":"oeAAA,IAAAA,EAAAC,EAAA,SAEA,MAAMC,EAAOC,SAASC,cAAc,SA0CpC,SAASC,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,CAACC,EAASC,IAC3BC,YAAW,KACT,MAAMC,EAAgBC,KAAKC,SAAW,GAChCC,EAAoB,C,SAAET,E,MAAUC,GAEtBK,EAAAH,EAAQM,GAAqBL,EAAOK,EAAkB,GACvER,I,CAfLL,EAAKc,iBAAiB,UA5BGC,IACvBA,EAAMC,iBAEN,IACEX,OAASY,MAAOC,GAChBC,MAAQF,MAAOE,GACfC,QAAUH,MAAOG,IACfL,EAAMM,cAAcC,SAGUJ,EAA1BK,OAAOL,GACfC,EAAOI,OAAOJ,GACdC,EAASG,OAAOH,GAGmB,IAA9B,IAAII,EAAI,EAAGA,GAAKJ,EAAQI,GAAK,EAChCrB,EAAcqB,EAAGN,GACdO,MAAK,EAACrB,SAAEA,EAAQC,MAAEA,KACjBP,EAAA4B,OAAOC,QAAQ,uBAAqBvB,QAAiBC,SAEtDuB,OAAM,EAACxB,SAAEA,EAAQC,MAAEA,KAClBP,EAAA4B,OAAOG,QAAQ,sBAAoBzB,QAAiBC,SAExDa,GAASC,EAEXnB,EAAK8B,OAAO","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst form = document.querySelector('.form');\n\n/**\n * Створює вказану кількість промісів\n * @param {event} Об'єкт події 'submit'\n */\nconst onCreatePromises = event => {\n  event.preventDefault();\n\n  let {\n    delay: { value: delay },\n    step: { value: step },\n    amount: { value: amount },\n  } = event.currentTarget.elements; // Отримання значень з полів сторінки\n\n  // Перетворення отриманих значень в число\n  delay = Number(delay);\n  step = Number(step);\n  amount = Number(amount);\n\n  // Створення вказаної в amount кількості промісів\n  for (let i = 1; i <= amount; i += 1) {\n    createPromise(i, delay)\n      .then(({ position, delay }) =>\n        Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`) // Обробка успішного виконання промісу\n      )\n      .catch(({ position, delay }) =>\n        Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`) // Обробка невдалого виконання промісу\n      );\n    delay += step;\n  }\n  form.reset();\n};\n\nform.addEventListener('submit', onCreatePromises);\n\n/**\n * \n * @param {*} position Номер промісу, що створюється\n * @param {*} delay Затримка\n * @returns {object} Проміс\n */\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => \n    setTimeout(() => {\n      const shouldResolve = Math.random() > 0.3; // Генерація успішності дії\n      const promiseParameters = { position, delay }; // Параметри промісу\n\n      shouldResolve ? resolve(promiseParameters) : reject(promiseParameters); // Виклик відповідного методу в залежності від успіху дії\n  }, delay) // Затримка зміни стану проміса\n );\n}\n"],"names":["$iQIUW","parcelRequire","$47d4ff9957288465$var$form","document","querySelector","$47d4ff9957288465$var$createPromise","position","delay","Promise","resolve","reject","setTimeout","shouldResolve","Math","random","promiseParameters","addEventListener","event","preventDefault","value","delay1","step","amount","currentTarget","elements","Number","i","then","Notify","success","catch","failure","reset"],"version":3,"file":"03-promises.f423c7c6.js.map"}